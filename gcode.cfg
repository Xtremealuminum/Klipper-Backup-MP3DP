
[safe_z_home]
home_xy_position: 150,150 #this should be the center of your bed
speed: 100 
z_hop: 10
z_hop_speed: 20

[idle_timeout]
gcode: 0


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(55)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(36)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}
    # Start chamber heating
    M141 S{CHAMBER_TEMP}
    # Start bed heating
    M140 S{BED_TEMP}
    # Start extruder heating
    M104 S{EXTRUDER_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.530
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    #M191 S0
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G90
    G1 X0 Y0 E-3 F300
    # Raise nozzle to max
    G1 Z286.9 F3000    
    # Disable steppers
    M84

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G90 
    G1 Z250 X10 Y10 F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro FILAMENT_PROFILE]
variable_parameter_FILAMENT_TYPE : "PLA"
description: Set current printing filament parameters
gcode:
  {% if params.FILAMENT_TYPE|default("DEFAULT") == "PLA" %}
    PRINT MSG="Set filament profile : PLA" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
    SET_FAN_SPEED FAN=filter_fan SPEED=0.1
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PETG" %}
    PRINT MSG="Set filament profile : PETG" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.08
    SET_FAN_SPEED FAN=filter_fan SPEED=0.75
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ABS" %}
    PRINT MSG="Set filament profile : ABS" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    SET_FAN_SPEED FAN=filter_fan SPEED=0.3
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ASA" %}
    PRINT MSG="Set filament profile : ASA" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    SET_FAN_SPEED FAN=filter_fan SPEED=0.25
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PC" %}
    PRINT MSG="Set filament profile : PC" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.067
    SET_FAN_SPEED FAN=filter_fan SPEED=0.0
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PC_CF" %}
    PRINT MSG="Set filament profile : PC_CF" OUTPUT_TARGET=1
    M221 S102 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
    SET_FAN_SPEED FAN=filter_fan SPEED=0.25
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "TEST" %}
    PRINT MSG="Set filament profile : TEST" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05 
    SET_FAN_SPEED FAN=filter_fan SPEED=1.0
  {% else %}
    PRINT MSG="Set filament profile : Default" OUTPUT_TARGET=1
    M221 S93 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.00
    SET_FAN_SPEED FAN=filter_fan SPEED=1.0
  {% endif %}

[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                                ; measure X
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELT_TEST]
description: Run resonance test to analyze belts
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="BELT TEST: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="BELT TEST: Resonance Tests starting ..."
  _PRINT_AR T="BELT TEST: Mesasure B belt"
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  _PRINT_AR T="BELT TEST: Mesasure A belt"
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  _PRINT_AR T="BELT TEST: Resonance Tests done"
  _PRINT_AR T="BELT TEST: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

#[gcode_macro CALIBRATE_Z]
#rename_existing: BASE_CALIBRATE_Z
#gcode:
#    {% set bed_position = params.BED_POSITION|default('None') %}
#    G28                         # can also be a conditional homing macro
#   M117 Z-Calibration..
#    ATTACH_PROBE                # a macro for fetching the probe first
#    {% if bed_position != 'None' %}
#      BASE_CALIBRATE_Z BED_POSITION={bed_position}
#    {% else %}
#      BASE_CALIBRATE_Z
#    {% endif %}
#    DETACH_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
#    M117